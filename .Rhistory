<<<<<<< HEAD
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-collaborative-coding/master/data/intro_survey_data.csv?token=ABT2upFQZIFSpEQFgfDJrKeXe8ijXgj_ks5Ww6VIwA%3D%3D")
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-collaborative-coding/master/data/intro_survey_data.csv?token=ABT2upFQZIFSpEQFgfDJrKeXe8ijXgj_ks5Ww6VIwA%3D%3D")
library(plotly)
library(dplyr)
library(knitr)
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-collaborative-coding/master/data/intro_survey_data.csv?token=ABT2upFQZIFSpEQFgfDJrKeXe8ijXgj_ks5Ww6VIwA%3D%3D")
=======
# Creates a new dataframe that only columns I want. (1. name  2. description  3. nice_created_at)
new_user_repositories_data <- data.frame(user_repositories_data$name, user_repositories_data$description, user_repositories_data$nice_created_at)
# Renames the new dataframe's/new_user_repositories_data's columns
names(new_user_repositories_data) <- c("Name", "Description", "Created_At")
plotly(user_repositories_data, x = name, y = size, text = paste("Date: " = nice_created_at),
mode = "markers" , color = size, size = size)
plotly(user_repositories_data, x = name, y = size, text = paste("Date: " = nice_created_at), mode = "markers" , color = size, size = size)
user_repositories_visual <- user_repositories_data[sample(nrow(user_repositories_data), 30), ]
plotly(user_repositories_visual, x = name, y = size, text = paste("Date: " = nice_created_at), mode = "markers" , color = size, size = size)
plot_ly(user_repositories_visual, x = name, y = size, text = paste("Date: " = nice_created_at), mode = "markers" , color = size, size = size)
visualization <- plot_ly(user_repositories_visual, x = name, y = size, text = paste("Date: " = nice_created_at), mode = "markers" , color = size, size = size)
View(visualization)
visualization <- plot_ly(user_repositories_visual, x = name, y = size, text = paste("Date: " = nice_created_at), mode = "markers" , color = size, size = size)
visualization
visualization <- plot_ly(user_repositories_visual, x = name, y = size, text = paste("Date: " = nice_created_at), mode = "markers" , color = size, size = size)
library(jsonlite)
library("jsonlite", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
new_user_repositories_data <- user_repositories_data$name, user_repositories_data$description, user_repositories_data$nice_created_at
?kable
user_repositories <- paste(user_repositories_pt_1, 'sort=created', 'order=desc', 'per_page=100', sep='&')
user_repositories
library(jsonlite)
library(knitr)
library(dplyr)
# This is the access token for github that will allow me to make up to 5,000 requests per hour.
access_grant <- '8df3575818d20eaf9f68ddebcb6181aa9ebb7964'
access_grant_part <- paste0('?access_token=', access_grant)
# The name of the Github organization.
github_org <- 'INFO-498F'
# The name of the Github user.
github_user <- 'mkfreeman'
# The url of the Github organization.
github_org_url <- paste0('https://api.github.com/orgs/', github_org)
# This is the url to get a list of the members in the Github organization, INFO-498F.
github_org_user_url <- paste0(github_org_url, '/members')
# The base url to gain access to a user's Github data.
github_user_url <- paste0('https://api.github.com/users/', github_user)
github_org_user_url
github_org_user_url <- paste0(github_org_url, '/members', '&per_page=100')
# The base url to gain access to a user's Github data.
github_user_url <- paste0('https://api.github.com/users/', github_user)
# The url that will pass the access token.
access_grant_url <- paste0(github_user_url, access_grant_part)
# This will return the data about a Github user.
data_user <- fromJSON(access_grant_url)
# This will obtain a url that can request information specifically about the user's repositories.
user_repositories_url <- data_user$repos_url
# This will generate the url that will sort the data the user's respositories by when it was created and put in descending order.
user_repositories_pt_1 <- paste0(user_repositories_url, access_grant_part)
user_repositories <- paste(user_repositories_pt_1, 'sort=created', 'order=desc', 'per_page=100', sep='&')
# Gets the data about the respositories and creates a dataframe out of it.
user_repositories_data <- fromJSON(user_repositories)
# Tests to see what class user_respositories_data is. (ie Trying to check if it is a dataframe or not)
class(user_repositories_data)
# Flattens the user_respositories_data dataframe to split the columns in the dataframe into multiple columns. This is because
# JSON objects are nested originally.
user_repositories_data <- flatten(user_repositories_data)
# The number of respositories that was returned to me.
num_repos <- ncol(user_repositories_data)
# The name of the respository with the greatest number of forks.
most_popular <- user_repositories_data %>%
filter(forks_count == max(forks_count)) %>%
select(name)
# To get the url of the Github user.
user_image_url <- data_user$avatar_url
# Creates a column in the user_repositories_data that stores the date the repositories was created, but in a nice and readable data format.
user_repositories_data$nice_created_at <- format(user_repositories_data$created_at, format='%B %d %Y')
user_repositories_data$nice_created_at <- strftime(user_repositories_data$nice_created_at , format = "%B %d, %Y", tz = "", usetz = FALSE)
# Creates a new dataframe that only columns I want. (1. name  2. description  3. nice_created_at)
new_user_repositories_data <- data.frame(user_repositories_data$name, user_repositories_data$description, user_repositories_data$nice_created_at)
# Renames the new dataframe's/new_user_repositories_data's columns
names(new_user_repositories_data) <- c("Name", "Description", "Created_At")
# This function will help look at any language you name and show the number of repositories and average number of forks for the language.
language_repo_forks <- function(language_request) {
match_language <- user_repositories_data %>%
filter(language == language_request) %>%
group_by(language) %>%
summarise(mean(forks_count))
num_of_repos <- nrow(match_language)
table = data.frame(match_language, num_of_repos)
names(table) <- c("Language", "Forks_Count", "Num_of_Repos")
return(table)
}
# Creates a dataframe for repos that used the R language.
r_info <- language_repo_forks('R')
# Creates a dataframe for repos that used the HTML language.
html_info <- language_repo_forks('HTML')
# Creates a dataframe for repos that used the JavaScript language.
javascript_info <- language_repo_forks('JavaScript')
# Creates a dataframe for repos that used the Scala language.
scala_info <- language_repo_forks('Scala')
# Creates a dataframe that combines the R dataframe and the HTML dataframe.
join_1 <- full_join(r_info, html_info, javascript_info, scala_info, by = c('Language' = 'Language', 'Forks_Count' = 'Forks_Count', 'Num_of_Repos' = 'Num_of_Repos'))
# Creates a dataframe that combines the JavaScript dataframe and the Scala dataframe.
join_2 <- full_join(javascript_info, scala_info, by = c('Language' = 'Language', 'Forks_Count' = 'Forks_Count', 'Num_of_Repos' = 'Num_of_Repos'))
# Creates a summary table that shows the number of repositories and average number of forks for each language.
summary_table <- full_join(join_1, join_2, by = c('Language' = 'Language', 'Forks_Count' = 'Forks_Count', 'Num_of_Repos' = 'Num_of_Repos'))
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
# BONUS Section
# Install the library plotly and require it
# install.packages("plotly")
library(plotly)
user_repositories_visual <- user_repositories_data[sample(nrow(user_repositories_data), 30), ]
visualization <- plot_ly(user_repositories_visual, x = name, y = size, text = paste("Date: " = nice_created_at), mode = "markers" , color = size, size = size)
```
library(dplyr)
library(plotly)
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-collaborative-coding/master/data/intro_survey_data.csv?token=ABT2upFQZIFSpEQFgfDJrKeXe8ijXgj_ks5Ww6VIwA%3D%3D")
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-collaborative-coding/master/data/intro_survey_data.csv?token=ABT2upFQZIFSpEQFgfDJrKeXe8ijXgj_ks5Ww6VIwA%3D%3D")
View("https://raw.githubusercontent.com/INFO-498F/a7-collaborative-coding/master/data/intro_survey_data.csv?token=ABT2upFQZIFSpEQFgfDJrKeXe8ijXgj_ks5Ww6VIwA%3D%3D")
getwd()
setwd("C:/Users/Kevin Cha/Documents/info498f/a7-collaborative-coding")
data <- read.csv("data/intro_survey_data.csv")
View(data)
data <- read.csv("data/intro_survey_data.csv")
View(data)
sum_func <- function(dataset){
# Finds the most numerous class standing
standing <- dataset %>% select(What.is.your.current.class.standing.) %>% group_by(What.is.your.current.class.standing.) %>%
summarise(majority_standing=sum(What.is.your.current.class.standing.=="Freshman", What.is.your.current.class.standing.=="Sophomore",
What.is.your.current.class.standing.=="Junior", What.is.your.current.class.standing.=="Senior"))
# Finds the class standing that is most interested in applying to the major
applying <- dataset %>% filter(Are.you.interested.in.applying.to.the.Informatics.major.== "Yes") %>% group_by(What.is.your.current.class.standing.) %>%
summarise(number_applying=sum(What.is.your.current.class.standing.=="Freshman", What.is.your.current.class.standing.=="Sophomore",
What.is.your.current.class.standing.=="Junior", What.is.your.current.class.standing.=="Senior"))
# Finds the most popular os in the class
os <- dataset %>% select(What.is.your.current.class.standing., What.operating.system.do.you.typically.use.) %>%
group_by(What.operating.system.do.you.typically.use.) %>%
summarise(popular_os=sum(What.operating.system.do.you.typically.use.=="Linux", What.operating.system.do.you.typically.use.=="Mac",
What.operating.system.do.you.typically.use.=="Windows",
What.operating.system.do.you.typically.use.=="Other: Windows at home, Linux (Ubuntu) at work"))
# Finds the most popular type of pet
pet <- dataset %>% select(Do.you.consider.yourself.) %>% group_by(Do.you.consider.yourself.) %>%
summarise(cat_dog=sum(Do.you.consider.yourself.=="Neither", Do.you.consider.yourself.=="Both!",
Do.you.consider.yourself.=="A cat person....", Do.you.consider.yourself.=="A dog person..."))
table <- left_join(standing, applying)
final <- data.frame(table, os, pet)
names(final)[1] <- "Class Standing"
names(final)[2] <- "Students in Class"
names(final)[3] <- "Number Applying to Info"
names(final)[4] <- "Type of OS"
names(final)[5] <- "Number of Users"
names(final)[6] <- "Are You A pet person?"
names(final)[7] <- "Number of Pet People"
return(final)
}
sum_func(data)
ds <-sum_func(data)
View(ds)
View(data)
read_data <- read.csv("data/intro_survey_data.csv")
source("scripts/Summary_Function")
read_data <- read.csv("data/intro_survey_data.csv")
source("scripts/Summary_Function")
source("scripts/Summary_Function.r")
read_data <- read.csv("data/intro_survey_data.csv")
source("scripts/Summary_Function.r")
new_data <- sum_func(read_data)
View(new_data)
View(read_data)
make_visualization <- function(requested_data, col_name) {
plot_ly(data = requested_data, x = requested_data[1], y = ) %>%
layout(
title = col_name
)
}
View(https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv)
View("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
make_visualization <- function(requested_data, col_name) {
plot_ly(data = requested_data, x = requested_data$Class Standing[1,], y = col_name, name = "Freshmen", mode = "markers", marker = list(color = "blue")) %>%
add_trace(x = requested_data$Class Standing[4,], name = "Sophomore", marker = list(color = "red")) %>%
add_trace(x = requested_data$Class Standing[2,], name = "Junior", marker = list(color = "green")) %>%
add_trace(x = requested_data$Class Standing[3,], name = "Senior", marker = list(color = "yellow")) %>%
layout(
title = col_name
)
}
make_visualization(new_data)
make_visualization <- function(requested_data) {
plot_ly(data = requested_data, x = requested_data[1, 1], y = requested_data[-1], name = "Freshmen",
mode = "markers", marker = list(color = "blue")) %>%
add_trace(x = requested_data[1, 4], name = "Sophomore", marker = list(color = "red")) %>%
add_trace(x = requested_data[1, 2], name = "Junior", marker = list(color = "green")) %>%
add_trace(x = requested_data[1, 3], name = "Senior", marker = list(color = "yellow")) %>%
layout(
title = "Summary of Class"
)
}
make_visualization(new_data)
make_visualization <- function(requested_data) {
plot_ly(data = requested_data, x = requested_data[1, 1], y = requested_data[,-1], name = "Freshmen",
mode = "markers", marker = list(color = "blue")) %>%
add_trace(x = requested_data[1, 4], name = "Sophomore", marker = list(color = "red")) %>%
add_trace(x = requested_data[1, 2], name = "Junior", marker = list(color = "green")) %>%
add_trace(x = requested_data[1, 3], name = "Senior", marker = list(color = "yellow")) %>%
layout(
title = "Summary of Class"
)
}
make_visualization(new_data)
chart_1 <- function(data){
# Used to add color scheme to barchart
library(RColorBrewer)
# Create a summary table grouped by class standing and has count of number of
# students in each class
summary_table <- data %>%
group_by(What.is.your.current.class.standing.) %>%
rename(Class_Standing = What.is.your.current.class.standing.) %>%
summarise(
Count = n()
)
# Add factor with levels to class standing column to allow sorting by class
summary_table$Class_Standing <-
summary_table$Class_Standing %>%
factor(levels=c('Freshman','Sophomore','Junior', 'Senior'))
# Sort the table by class standing instead of alphabetically
summary_table = summary_table[order(summary_table$Class_Standing,decreasing=FALSE),]
# Make a barchart with the Class Standing on the x-axis and the count of
# students in each class on the y-axis
p <- plot_ly(summary_table,
x = Class_Standing,
y = Count,
marker = list(color = brewer.pal(4, "Set1")),
type = "bar"
) %>%
layout(title = 'Class Standing Count in Info 498F',
xaxis = list(title = 'Class Standing'))
return(p)
}
chart_1(new_data)
chart_1(data)
data <- read.csv("data/intro_survey_data.csv")
chart_1(data)
summary <- sum_func(data)
summary_table <- data %>%
group_by(What.is.your.current.class.standing.) %>%
rename(Class_Standing = What.is.your.current.class.standing.) %>%
summarise(
Count = n()
)
View(summary_table)
data <- read.csv("data/intro_survey_data.csv")
summary_table <- data %>%
group_by(What.is.your.current.class.standing.) %>%
rename(Class_Standing = What.is.your.current.class.standing.) %>%
summarise(
Count = n()
)
View(summary_table)
summary_table$Class_Standing <-
summary_table$Class_Standing %>%
factor(levels=c('Freshman','Sophomore','Junior', 'Senior'))
View(summary_table)
summary_table = summary_table[order(summary_table$Class_Standing,decreasing=FALSE),]
View(summary_table)
x = ClassStanding,
source("scripts/Summary_Function.r")
source("scripts/Summary_Function.r")
summary <- sum_func(data)
View(summary)
View(summary_table)
x = summary$Class Standing,
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace(
x = summary$'Class Standing',
y = summary$'Students in Class',
name = 'Population of Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing")
)
return(chart)
}
make_visualization(summary)
make_visualization(data)
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace(
x = summary$'Class Standing',
y = summary$'Students in Class',
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing")
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace(
x = summary$'Class Standing',
y = summary$'Students in Class',
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing")
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace(
x = summary$'Class Standing',
y = summary$'Students in Class',
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization(data)
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace(
x = summary$'Class Standing',
y = summary$'Students in Class' - summary$'Number Applying to Info',
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization(data)
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
text = paste('Applying: ', summary$'Number Applying to Info'),
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace(
x = summary$'Class Standing',
y = summary$'Students in Class' - summary$'Number Applying to Info',
text = paste('Population: ', summary$'Students in Class' + summary$'Number Applying to Info'),
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization(data)
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
text = paste('Applying: ', summary$'Number Applying to Info'),
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace(
x = summary$'Class Standing',
y = summary$'Students in Class' - summary$'Number Applying to Info',
text = paste('Population: ', summary$'Students in Class'),
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization(data)
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly( # Creates the bottom part of the stacked bar graph that tlaks about the people planning on applying to Informatics.
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
text = paste('Applying: ', summary$'Number Applying to Info'), # Reports the total number of people planning to apply.
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace( # Creates the top part of the stacked bar graph that talks about the people who aren't planning on applying to Informatics.
x = summary$'Class Standing',
y = summary$'Students in Class' - summary$'Number Applying to Info',
text = paste('Population: ', summary$'Students in Class'), # Reports the number of people in the class instead of just the difference.
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Population of Class")
)
return(chart)
make_visualization(summary)
}
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly( # Creates the bottom part of the stacked bar graph that tlaks about the people planning on applying to Informatics.
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
text = paste('Applying: ', summary$'Number Applying to Info'), # Reports the total number of people planning to apply.
name = 'Applying to Informatics',
type = "bar"
) %>%
add_trace( # Creates the top part of the stacked bar graph that talks about the people who aren't planning on applying to Informatics.
x = summary$'Class Standing',
y = summary$'Students in Class' - summary$'Number Applying to Info',
text = paste('Population: ', summary$'Students in Class'), # Reports the number of people in the class instead of just the difference.
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization(summary)
make_visualization(summary)
summary <- sum_func(data)
make_visualization(summary)
make_visualization(data)
make_visualization <- function(requested_data) {
summary <- sum_func(requested_data)
chart <- plot_ly(
# Creates the bottom part of the stacked bar graph that tlaks about the people planning on applying to Informatics.
data = summary,
x = summary$'Class Standing',
y = summary$'Number Applying to Info',
# Reports the total number of people planning to apply.
text = paste('Applying: ', summary$'Number Applying to Info'),
name = 'Applying to Informatics',
type = "bar"
) %>%
# Creates the top part of the stacked bar graph that talks about the people who aren't planning on applyign to Informatics.
add_trace(
x = summary$'Class Standing',
# Uses the difference to show the actual population of the class.
y = summary$'Students in Class' - summary$'Number Applying to Info',
# Reports the number of people in the class instead of just the difference.
text = paste('Population: ', summary$'Students in Class'),
name = 'People in Class'
) %>%
layout(
title = "Students Applying to Informatics",
barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Population of Class")
)
return(chart)
}
make_visualization(data)
>>>>>>> 9ad11304b8d1f20011be109f270eae98798122b4
